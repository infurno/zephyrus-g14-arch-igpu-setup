#!/bin/bash
# gpu-state-manager - GPU state detection and switching validation
# Comprehensive GPU management for hybrid AMD/NVIDIA systems

set -euo pipefail

# Script configuration
SCRIPT_NAME="gpu-state-manager"
LOG_FILE="/var/log/gpu-state-manager.log"
STATE_FILE="/tmp/gpu-state.json"
BBSWITCH_PATH="/proc/acpi/bbswitch"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [$SCRIPT_NAME] $1" | tee -a "$LOG_FILE"
}

# Error handling
error_exit() {
    echo -e "${RED}Error: $1${NC}" >&2
    log "ERROR: $1"
    exit 1
}

# Warning function
warn() {
    echo -e "${YELLOW}Warning: $1${NC}" >&2
    log "WARNING: $1"
}

# Info function
info() {
    echo -e "${BLUE}Info: $1${NC}"
    log "INFO: $1"
}

# Success function
success() {
    echo -e "${GREEN}Success: $1${NC}"
    log "SUCCESS: $1"
}

# Create state file if it doesn't exist
init_state_file() {
    if [ ! -f "$STATE_FILE" ]; then
        cat > "$STATE_FILE" << EOF
{
    "nvidia_gpu": {
        "present": false,
        "powered": false,
        "driver_loaded": false,
        "processes": 0
    },
    "amd_gpu": {
        "present": false,
        "active": false,
        "driver_loaded": false
    },
    "power_source": "unknown",
    "thermal_state": "normal",
    "last_update": "$(date -Iseconds)"
}
EOF
    fi
}

# Update state file
update_state() {
    local key="$1"
    local value="$2"
    
    # Use jq to update JSON if available, otherwise use sed
    if command -v jq > /dev/null 2>&1; then
        jq ".$key = $value | .last_update = \"$(date -Iseconds)\"" "$STATE_FILE" > "${STATE_FILE}.tmp" && mv "${STATE_FILE}.tmp" "$STATE_FILE"
    else
        # Fallback to manual JSON update
        sed -i "s/\"$key\": [^,}]*/\"$key\": $value/" "$STATE_FILE"
        sed -i "s/\"last_update\": \"[^\"]*\"/\"last_update\": \"$(date -Iseconds)\"/" "$STATE_FILE"
    fi
}

# Get state value
get_state() {
    local key="$1"
    
    if command -v jq > /dev/null 2>&1; then
        jq -r ".$key" "$STATE_FILE" 2>/dev/null || echo "null"
    else
        # Fallback to grep/sed
        grep "\"$key\":" "$STATE_FILE" | sed 's/.*: *"\?\([^",}]*\)"\?.*/\1/' || echo "null"
    fi
}

# Detect NVIDIA GPU presence
detect_nvidia_gpu() {
    local nvidia_present=false
    
    if lspci | grep -i nvidia > /dev/null 2>&1; then
        nvidia_present=true
        log "NVIDIA GPU detected in system"
    else
        log "No NVIDIA GPU detected"
    fi
    
    update_state "nvidia_gpu.present" "$nvidia_present"
    echo "$nvidia_present"
}

# Detect AMD GPU presence
detect_amd_gpu() {
    local amd_present=false
    
    if lspci | grep -E "(AMD|ATI).*VGA|AMD.*Display" > /dev/null 2>&1; then
        amd_present=true
        log "AMD GPU detected in system"
    else
        log "No AMD GPU detected"
    fi
    
    update_state "amd_gpu.present" "$amd_present"
    echo "$amd_present"
}

# Check NVIDIA GPU power state
check_nvidia_power() {
    local powered=false
    
    if [ -f "$BBSWITCH_PATH" ]; then
        local state=$(cat "$BBSWITCH_PATH" | awk '{print $2}')
        if [ "$state" = "ON" ]; then
            powered=true
        fi
    elif nvidia-smi > /dev/null 2>&1; then
        # If bbswitch not available but nvidia-smi works, assume powered
        powered=true
    fi
    
    update_state "nvidia_gpu.powered" "$powered"
    log "NVIDIA GPU power state: $powered"
    echo "$powered"
}

# Check NVIDIA driver status
check_nvidia_driver() {
    local driver_loaded=false
    
    if lsmod | grep nvidia > /dev/null 2>&1; then
        driver_loaded=true
        log "NVIDIA driver is loaded"
    else
        log "NVIDIA driver is not loaded"
    fi
    
    update_state "nvidia_gpu.driver_loaded" "$driver_loaded"
    echo "$driver_loaded"
}

# Check AMD driver status
check_amd_driver() {
    local driver_loaded=false
    
    if lsmod | grep -E "(amdgpu|radeon)" > /dev/null 2>&1; then
        driver_loaded=true
        log "AMD driver is loaded"
    else
        log "AMD driver is not loaded"
    fi
    
    update_state "amd_gpu.driver_loaded" "$driver_loaded"
    echo "$driver_loaded"
}

# Count NVIDIA GPU processes
count_nvidia_processes() {
    local process_count=0
    
    if command -v nvidia-smi > /dev/null 2>&1; then
        process_count=$(nvidia-smi --query-compute-apps=pid --format=csv,noheader,nounits 2>/dev/null | wc -l)
    fi
    
    update_state "nvidia_gpu.processes" "$process_count"
    log "NVIDIA GPU processes: $process_count"
    echo "$process_count"
}

# Detect power source
detect_power_source() {
    local power_source="unknown"
    
    if [ -d /sys/class/power_supply ]; then
        for ps in /sys/class/power_supply/*/; do
            if [ -f "$ps/type" ] && [ "$(cat "$ps/type")" = "Mains" ]; then
                if [ -f "$ps/online" ]; then
                    if [ "$(cat "$ps/online")" = "1" ]; then
                        power_source="ac"
                    else
                        power_source="battery"
                    fi
                    break
                fi
            fi
        done
    fi
    
    update_state "power_source" "\"$power_source\""
    log "Power source: $power_source"
    echo "$power_source"
}

# Check thermal state
check_thermal_state() {
    local thermal_state="normal"
    local max_temp=0
    
    if [ -d /sys/class/thermal ]; then
        for tz in /sys/class/thermal/thermal_zone*/; do
            if [ -f "$tz/temp" ]; then
                local temp=$(cat "$tz/temp")
                if [ "$temp" -gt "$max_temp" ]; then
                    max_temp=$temp
                fi
            fi
        done
        
        # Convert from millicelsius to celsius
        max_temp=$((max_temp / 1000))
        
        if [ "$max_temp" -gt 85 ]; then
            thermal_state="critical"
        elif [ "$max_temp" -gt 75 ]; then
            thermal_state="warning"
        fi
    fi
    
    update_state "thermal_state" "\"$thermal_state\""
    log "Thermal state: $thermal_state (max temp: ${max_temp}Â°C)"
    echo "$thermal_state"
}

# Validate GPU switching capability
validate_gpu_switching() {
    local validation_result="pass"
    local issues=()
    
    info "Validating GPU switching capability..."
    
    # Check if both GPUs are present
    local nvidia_present=$(detect_nvidia_gpu)
    local amd_present=$(detect_amd_gpu)
    
    if [ "$nvidia_present" != "true" ]; then
        issues+=("NVIDIA GPU not detected")
        validation_result="fail"
    fi
    
    if [ "$amd_present" != "true" ]; then
        issues+=("AMD GPU not detected")
        validation_result="fail"
    fi
    
    # Check driver status
    local nvidia_driver=$(check_nvidia_driver)
    local amd_driver=$(check_amd_driver)
    
    if [ "$nvidia_driver" != "true" ] && [ "$nvidia_present" = "true" ]; then
        issues+=("NVIDIA driver not loaded")
        validation_result="fail"
    fi
    
    if [ "$amd_driver" != "true" ] && [ "$amd_present" = "true" ]; then
        issues+=("AMD driver not loaded")
        validation_result="fail"
    fi
    
    # Check bbswitch availability
    if [ ! -f "$BBSWITCH_PATH" ] && [ "$nvidia_present" = "true" ]; then
        issues+=("bbswitch not available for NVIDIA power management")
        validation_result="warn"
    fi
    
    # Check PRIME render offload environment
    if [ -z "${__NV_PRIME_RENDER_OFFLOAD:-}" ] && [ "$nvidia_present" = "true" ]; then
        issues+=("PRIME render offload environment not configured")
        validation_result="warn"
    fi
    
    # Report results
    if [ "$validation_result" = "pass" ]; then
        success "GPU switching validation passed"
    elif [ "$validation_result" = "warn" ]; then
        warn "GPU switching validation passed with warnings:"
        for issue in "${issues[@]}"; do
            echo "  - $issue"
        done
    else
        error_exit "GPU switching validation failed:\n$(printf '  - %s\n' "${issues[@]}")"
    fi
    
    echo "$validation_result"
}

# Handle udev events
handle_udev_event() {
    local event="$1"
    
    case "$event" in
        "gpu-added")
            info "GPU added event received"
            detect_nvidia_gpu
            detect_amd_gpu
            ;;
        "gpu-removed")
            info "GPU removed event received"
            detect_nvidia_gpu
            detect_amd_gpu
            ;;
        "nvidia-loaded")
            info "NVIDIA driver loaded"
            check_nvidia_driver
            check_nvidia_power
            ;;
        "nvidia-unloaded")
            info "NVIDIA driver unloaded"
            check_nvidia_driver
            ;;
        "bbswitch-loaded")
            info "bbswitch module loaded"
            check_nvidia_power
            ;;
        "bbswitch-unloaded")
            info "bbswitch module unloaded"
            check_nvidia_power
            ;;
        "ac-connected")
            info "AC power connected"
            detect_power_source
            # Allow NVIDIA GPU to be used on AC power
            ;;
        "ac-disconnected")
            info "AC power disconnected"
            detect_power_source
            # Consider powering off NVIDIA GPU on battery
            if [ "$(count_nvidia_processes)" -eq 0 ]; then
                /usr/local/bin/bbswitch-control off 2>/dev/null || true
            fi
            ;;
        "battery-discharging")
            info "Battery discharging"
            detect_power_source
            ;;
        "battery-charging")
            info "Battery charging"
            detect_power_source
            ;;
        "thermal-warning")
            warn "Thermal warning detected"
            check_thermal_state
            ;;
        "thermal-critical")
            error_exit "Critical thermal state detected"
            ;;
        *)
            log "Unknown udev event: $event"
            ;;
    esac
}

# Display comprehensive system status
show_status() {
    init_state_file
    
    echo -e "${BLUE}=== GPU State Manager Status ===${NC}"
    echo
    
    # Update all states
    detect_nvidia_gpu > /dev/null
    detect_amd_gpu > /dev/null
    check_nvidia_power > /dev/null
    check_nvidia_driver > /dev/null
    check_amd_driver > /dev/null
    count_nvidia_processes > /dev/null
    detect_power_source > /dev/null
    check_thermal_state > /dev/null
    
    # Display status
    echo "NVIDIA GPU:"
    echo "  Present: $(get_state nvidia_gpu.present)"
    echo "  Powered: $(get_state nvidia_gpu.powered)"
    echo "  Driver Loaded: $(get_state nvidia_gpu.driver_loaded)"
    echo "  Active Processes: $(get_state nvidia_gpu.processes)"
    echo
    
    echo "AMD GPU:"
    echo "  Present: $(get_state amd_gpu.present)"
    echo "  Driver Loaded: $(get_state amd_gpu.driver_loaded)"
    echo
    
    echo "System:"
    echo "  Power Source: $(get_state power_source)"
    echo "  Thermal State: $(get_state thermal_state)"
    echo "  Last Update: $(get_state last_update)"
    echo
    
    # Show bbswitch status if available
    if [ -f "$BBSWITCH_PATH" ]; then
        echo "bbswitch Status:"
        cat "$BBSWITCH_PATH"
        echo
    fi
}

# Display usage information
usage() {
    cat << EOF
Usage: $SCRIPT_NAME [COMMAND] [OPTIONS]

GPU state detection and switching validation for hybrid systems.

COMMANDS:
    status              Show comprehensive GPU status
    validate            Validate GPU switching capability
    detect              Detect all GPU states and update state file
    event EVENT         Handle udev event (internal use)
    help                Show this help message

DETECTION COMMANDS:
    detect-nvidia       Detect NVIDIA GPU presence
    detect-amd          Detect AMD GPU presence
    check-power         Check NVIDIA GPU power state
    check-drivers       Check GPU driver status
    check-processes     Count NVIDIA GPU processes
    check-thermal       Check thermal state

EXAMPLES:
    $SCRIPT_NAME status
    $SCRIPT_NAME validate
    $SCRIPT_NAME detect
    $SCRIPT_NAME event ac-connected

FILES:
    State file: $STATE_FILE
    Log file: $LOG_FILE
    bbswitch: $BBSWITCH_PATH

EOF
}

# Main execution function
main() {
    # Ensure log directory exists
    mkdir -p "$(dirname "$LOG_FILE")"
    
    # Initialize state file
    init_state_file
    
    if [ $# -eq 0 ]; then
        show_status
        exit 0
    fi
    
    case "$1" in
        "status")
            show_status
            ;;
        "validate")
            validate_gpu_switching
            ;;
        "detect")
            detect_nvidia_gpu > /dev/null
            detect_amd_gpu > /dev/null
            check_nvidia_power > /dev/null
            check_nvidia_driver > /dev/null
            check_amd_driver > /dev/null
            count_nvidia_processes > /dev/null
            detect_power_source > /dev/null
            check_thermal_state > /dev/null
            success "GPU state detection completed"
            ;;
        "detect-nvidia")
            detect_nvidia_gpu
            ;;
        "detect-amd")
            detect_amd_gpu
            ;;
        "check-power")
            check_nvidia_power
            ;;
        "check-drivers")
            echo "NVIDIA: $(check_nvidia_driver)"
            echo "AMD: $(check_amd_driver)"
            ;;
        "check-processes")
            count_nvidia_processes
            ;;
        "check-thermal")
            check_thermal_state
            ;;
        "event")
            if [ $# -lt 2 ]; then
                error_exit "Event command requires an event type"
            fi
            handle_udev_event "$2"
            ;;
        "help"|"-h"|"--help")
            usage
            ;;
        *)
            error_exit "Unknown command: $1. Use 'help' for usage information."
            ;;
    esac
}

# Execute main function with all arguments
main "$@"