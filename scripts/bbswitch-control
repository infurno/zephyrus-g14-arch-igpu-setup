#!/bin/bash
# bbswitch-control - NVIDIA GPU power management via bbswitch
# Provides functions for controlling NVIDIA GPU power state

set -euo pipefail

# Script configuration
SCRIPT_NAME="bbswitch-control"
LOG_FILE="/tmp/bbswitch-control.log"
BBSWITCH_PATH="/proc/acpi/bbswitch"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [$SCRIPT_NAME] $1" | tee -a "$LOG_FILE"
}

# Error handling
error_exit() {
    echo -e "${RED}Error: $1${NC}" >&2
    log "ERROR: $1"
    exit 1
}

# Warning function
warn() {
    echo -e "${YELLOW}Warning: $1${NC}" >&2
    log "WARNING: $1"
}

# Info function
info() {
    echo -e "${BLUE}Info: $1${NC}"
    log "INFO: $1"
}

# Success function
success() {
    echo -e "${GREEN}Success: $1${NC}"
    log "SUCCESS: $1"
}

# Check if bbswitch is available
check_bbswitch_available() {
    if [ ! -f "$BBSWITCH_PATH" ]; then
        error_exit "bbswitch module not loaded or not available at $BBSWITCH_PATH"
    fi
    
    if [ ! -r "$BBSWITCH_PATH" ] || [ ! -w "$BBSWITCH_PATH" ]; then
        error_exit "Insufficient permissions to access $BBSWITCH_PATH (run as root)"
    fi
    
    log "bbswitch is available and accessible"
}

# Get current GPU state
get_gpu_state() {
    if [ -f "$BBSWITCH_PATH" ]; then
        local state=$(cat "$BBSWITCH_PATH" | awk '{print $2}')
        echo "$state"
    else
        echo "UNKNOWN"
    fi
}

# Display current GPU state
show_gpu_state() {
    local state=$(get_gpu_state)
    case "$state" in
        "ON")
            echo -e "${GREEN}NVIDIA GPU is ON${NC}"
            ;;
        "OFF")
            echo -e "${YELLOW}NVIDIA GPU is OFF${NC}"
            ;;
        *)
            echo -e "${RED}NVIDIA GPU state is UNKNOWN${NC}"
            ;;
    esac
    
    if [ -f "$BBSWITCH_PATH" ]; then
        echo "Raw bbswitch output: $(cat "$BBSWITCH_PATH")"
    fi
}

# Turn GPU on
gpu_on() {
    check_bbswitch_available
    
    local current_state=$(get_gpu_state)
    if [ "$current_state" = "ON" ]; then
        info "NVIDIA GPU is already ON"
        return 0
    fi
    
    info "Turning NVIDIA GPU ON..."
    if echo "ON" > "$BBSWITCH_PATH" 2>/dev/null; then
        success "NVIDIA GPU turned ON successfully"
        
        # Wait a moment for GPU to initialize
        sleep 2
        
        # Verify the state change
        local new_state=$(get_gpu_state)
        if [ "$new_state" = "ON" ]; then
            log "GPU state verified as ON"
        else
            warn "GPU state verification failed: expected ON, got $new_state"
        fi
    else
        error_exit "Failed to turn NVIDIA GPU ON"
    fi
}

# Turn GPU off
gpu_off() {
    check_bbswitch_available
    
    local current_state=$(get_gpu_state)
    if [ "$current_state" = "OFF" ]; then
        info "NVIDIA GPU is already OFF"
        return 0
    fi
    
    # Check if GPU is in use before turning off
    if command -v nvidia-smi > /dev/null 2>&1; then
        local gpu_processes=$(nvidia-smi --query-compute-apps=pid --format=csv,noheader,nounits 2>/dev/null | wc -l)
        if [ "$gpu_processes" -gt 0 ]; then
            warn "NVIDIA GPU has $gpu_processes active processes, forcing shutdown anyway"
        fi
    fi
    
    info "Turning NVIDIA GPU OFF..."
    if echo "OFF" > "$BBSWITCH_PATH" 2>/dev/null; then
        success "NVIDIA GPU turned OFF successfully"
        
        # Verify the state change
        local new_state=$(get_gpu_state)
        if [ "$new_state" = "OFF" ]; then
            log "GPU state verified as OFF"
        else
            warn "GPU state verification failed: expected OFF, got $new_state"
        fi
    else
        error_exit "Failed to turn NVIDIA GPU OFF"
    fi
}

# Toggle GPU state
gpu_toggle() {
    local current_state=$(get_gpu_state)
    case "$current_state" in
        "ON")
            gpu_off
            ;;
        "OFF")
            gpu_on
            ;;
        *)
            error_exit "Cannot toggle GPU: current state is $current_state"
            ;;
    esac
}

# Check if NVIDIA processes are running
check_nvidia_processes() {
    if ! command -v nvidia-smi > /dev/null 2>&1; then
        warn "nvidia-smi not available, cannot check for NVIDIA processes"
        return 0
    fi
    
    local gpu_processes=$(nvidia-smi --query-compute-apps=pid,process_name --format=csv,noheader 2>/dev/null)
    if [ -n "$gpu_processes" ]; then
        echo -e "${YELLOW}Active NVIDIA GPU processes:${NC}"
        echo "$gpu_processes"
        return 1
    else
        echo -e "${GREEN}No active NVIDIA GPU processes${NC}"
        return 0
    fi
}

# Auto power management based on battery state
auto_power_management() {
    local battery_status=""
    
    # Check battery status
    if [ -d /sys/class/power_supply ]; then
        for ps in /sys/class/power_supply/*/; do
            if [ -f "$ps/type" ] && [ "$(cat "$ps/type")" = "Battery" ]; then
                if [ -f "$ps/status" ]; then
                    battery_status=$(cat "$ps/status")
                    break
                fi
            fi
        done
    fi
    
    case "$battery_status" in
        "Discharging")
            info "On battery power, turning NVIDIA GPU OFF for power saving"
            gpu_off
            ;;
        "Charging"|"Full")
            info "On AC power, NVIDIA GPU can be used as needed"
            # Don't automatically turn on, let applications request it
            ;;
        *)
            warn "Battery status unknown: $battery_status"
            ;;
    esac
}

# Display usage information
usage() {
    cat << EOF
Usage: $SCRIPT_NAME [COMMAND]

Control NVIDIA GPU power state via bbswitch module.

COMMANDS:
    on              Turn NVIDIA GPU on
    off             Turn NVIDIA GPU off
    toggle          Toggle NVIDIA GPU state
    status          Show current GPU state
    processes       Check for active NVIDIA processes
    auto            Auto power management based on battery state
    help            Show this help message

EXAMPLES:
    $SCRIPT_NAME on
    $SCRIPT_NAME off
    $SCRIPT_NAME status
    $SCRIPT_NAME processes
    $SCRIPT_NAME auto

NOTE: This script requires root privileges to control GPU power state.

EOF
}

# Main execution function
main() {
    if [ $# -eq 0 ]; then
        usage
        exit 1
    fi
    
    case "$1" in
        "on")
            gpu_on
            ;;
        "off")
            gpu_off
            ;;
        "toggle")
            gpu_toggle
            ;;
        "status")
            show_gpu_state
            ;;
        "processes")
            check_nvidia_processes
            ;;
        "auto")
            auto_power_management
            ;;
        "help"|"-h"|"--help")
            usage
            ;;
        *)
            error_exit "Unknown command: $1. Use 'help' for usage information."
            ;;
    esac
}

# Execute main function with all arguments
main "$@"