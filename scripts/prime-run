#!/bin/bash
# prime-run - NVIDIA GPU offload rendering script
# Runs applications using the NVIDIA dGPU via PRIME render offload

set -euo pipefail

# Script configuration
SCRIPT_NAME="prime-run"
LOG_FILE="/tmp/prime-run.log"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [$SCRIPT_NAME] $1" | tee -a "$LOG_FILE"
}

# Error handling
error_exit() {
    echo -e "${RED}Error: $1${NC}" >&2
    log "ERROR: $1"
    exit 1
}

# Warning function
warn() {
    echo -e "${YELLOW}Warning: $1${NC}" >&2
    log "WARNING: $1"
}

# Info function
info() {
    echo -e "${BLUE}Info: $1${NC}"
    log "INFO: $1"
}

# Success function
success() {
    echo -e "${GREEN}Success: $1${NC}"
    log "SUCCESS: $1"
}

# Check if NVIDIA GPU is available
check_nvidia_gpu() {
    if ! lspci | grep -i nvidia > /dev/null 2>&1; then
        error_exit "NVIDIA GPU not detected in system"
    fi
    
    if ! nvidia-smi > /dev/null 2>&1; then
        error_exit "NVIDIA drivers not properly installed or GPU not accessible"
    fi
    
    log "NVIDIA GPU detected and accessible"
}

# Check if bbswitch is available and GPU can be powered on
check_bbswitch() {
    if [ -f /proc/acpi/bbswitch ]; then
        local gpu_state=$(cat /proc/acpi/bbswitch | awk '{print $2}')
        if [ "$gpu_state" = "OFF" ]; then
            info "NVIDIA GPU is powered off, attempting to power on..."
            if ! echo ON > /proc/acpi/bbswitch 2>/dev/null; then
                warn "Could not power on NVIDIA GPU via bbswitch, trying alternative method"
                # Try alternative power management
                if [ -d /sys/bus/pci/devices ]; then
                    for dev in /sys/bus/pci/devices/*/; do
                        if [ -f "$dev/vendor" ] && [ "$(cat "$dev/vendor")" = "0x10de" ]; then
                            echo "on" > "$dev/power/control" 2>/dev/null || true
                        fi
                    done
                fi
            else
                success "NVIDIA GPU powered on successfully"
            fi
        else
            log "NVIDIA GPU is already powered on"
        fi
    else
        log "bbswitch not available, assuming GPU is always powered"
    fi
}

# Set up PRIME render offload environment
setup_prime_offload() {
    export __NV_PRIME_RENDER_OFFLOAD=1
    export __NV_PRIME_RENDER_OFFLOAD_PROVIDER=NVIDIA-G0
    export __GLX_VENDOR_LIBRARY_NAME=nvidia
    export __VK_LAYER_NV_optimus=NVIDIA_only
    
    log "PRIME render offload environment configured"
}

# Validate GPU offload setup
validate_offload() {
    # Check if NVIDIA GPU is being used for rendering
    if command -v nvidia-smi > /dev/null 2>&1; then
        local gpu_processes=$(nvidia-smi --query-compute-apps=pid --format=csv,noheader,nounits 2>/dev/null | wc -l)
        log "NVIDIA GPU validation: $gpu_processes processes detected"
    fi
}

# Display usage information
usage() {
    cat << EOF
Usage: $SCRIPT_NAME [OPTIONS] COMMAND [ARGS...]

Run applications using NVIDIA GPU via PRIME render offload.

OPTIONS:
    -h, --help      Show this help message
    -v, --verbose   Enable verbose output
    -d, --dry-run   Show what would be executed without running
    --validate      Validate GPU offload setup and exit

EXAMPLES:
    $SCRIPT_NAME glxgears
    $SCRIPT_NAME steam
    $SCRIPT_NAME blender
    $SCRIPT_NAME --verbose firefox
    $SCRIPT_NAME --validate

ENVIRONMENT VARIABLES SET:
    __NV_PRIME_RENDER_OFFLOAD=1
    __NV_PRIME_RENDER_OFFLOAD_PROVIDER=NVIDIA-G0
    __GLX_VENDOR_LIBRARY_NAME=nvidia
    __VK_LAYER_NV_optimus=NVIDIA_only

EOF
}

# Main execution function
main() {
    local verbose=false
    local dry_run=false
    local validate_only=false
    local args=()
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                usage
                exit 0
                ;;
            -v|--verbose)
                verbose=true
                shift
                ;;
            -d|--dry-run)
                dry_run=true
                shift
                ;;
            --validate)
                validate_only=true
                shift
                ;;
            --)
                shift
                args+=("$@")
                break
                ;;
            -*)
                error_exit "Unknown option: $1"
                ;;
            *)
                args+=("$1")
                shift
                ;;
        esac
    done
    
    # Enable verbose logging if requested
    if [ "$verbose" = true ]; then
        set -x
    fi
    
    log "Starting $SCRIPT_NAME with arguments: ${args[*]:-none}"
    
    # Validation mode
    if [ "$validate_only" = true ]; then
        info "Validating GPU offload setup..."
        check_nvidia_gpu
        check_bbswitch
        setup_prime_offload
        validate_offload
        success "GPU offload validation completed"
        exit 0
    fi
    
    # Check if command was provided
    if [ ${#args[@]} -eq 0 ]; then
        error_exit "No command specified. Use -h for help."
    fi
    
    # Perform pre-execution checks
    check_nvidia_gpu
    check_bbswitch
    setup_prime_offload
    
    # Execute command
    if [ "$dry_run" = true ]; then
        info "Dry run mode - would execute: ${args[*]}"
        info "Environment variables that would be set:"
        echo "  __NV_PRIME_RENDER_OFFLOAD=1"
        echo "  __NV_PRIME_RENDER_OFFLOAD_PROVIDER=NVIDIA-G0"
        echo "  __GLX_VENDOR_LIBRARY_NAME=nvidia"
        echo "  __VK_LAYER_NV_optimus=NVIDIA_only"
    else
        info "Executing command with NVIDIA GPU offload: ${args[*]}"
        exec "${args[@]}"
    fi
}

# Execute main function with all arguments
main "$@"